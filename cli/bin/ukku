#!/usr/bin/env ruby
require 'docopt'
require 'subprocess'
require 'rye'
require 'rugged'
require 'yaml'
require 'ukku'

doc = <<DOCOPT
Ukku.

Usage:
  ukku configure [-u USER] [-i IDENTITY_FILE] [--no-pg] HOST [NAME]
  ukku [--app=NAME] run COMMAND...
  ukku [--app=NAME] keys:upload PUBLIC_KEY_FILE
  ukku [--app=NAME] vars
  ukku [--app=NAME] vars:set VAR_NAME VAR_VALUE
  ukku [--app=NAME] ps
  ukku [--app=NAME] ps:add TYPE
  ukku [--app=NAME] ps:remove TYPE
  ukku [--app=NAME] ps:restart [TYPE]

Arguments:
  HOST                  Domain or IP of your server.
  NAME                  A name for the application. Defaults to 'production'.

Options:
  -u USER --user=USER   User used to connect to your server. Defaults to 'root'.
  -i IDENTITY_FILE      The SSH key used to connect to your server. Defaults to '~/.ssh/id_rsa'.
  --app=NAME            The name of the application.

DOCOPT

UKKU_FILE = '.ukku.yml'

begin
  # parse args
  args = Docopt::docopt(doc)

  # execute commands
  ConfigureCommand.new.execute(args) if args['configure']
  RunCommand.new.execute(args) if args['run']
  UploadKeyCommand.new.execute(args) if args['keys:upload']
  VarsCommand.new.execute(args) if args['vars']
  SetVarCommand.new.execute(args) if args['vars:set']
  PsCommand.new.execute(args) if args['ps']
  PsAddCommand.new.execute(args) if args['ps:add']
  PsRemoveCommand.new.execute(args) if args['ps:remove']
rescue Docopt::Exit => e
  puts doc.strip
rescue Exception => e
  puts "   !   #{e.message}"
  puts e.backtrace
  exit 1
end